// For format details, see https://aka.ms/devcontainer.json. For config options, see the README at:
// https://github.com/microsoft/vscode-dev-containers/tree/v0.154.2/containers/docker-existing-dockerfile
{
	"name": "dev-docker",
	// "initializeCommand": [
	// 	"/bin/bash",
	// 	"-c",
	// 	"chmod +x script/.env_vars &&",
	// 	"source",
	// 	"script/.env_vars"
	// ],
	"dockerFile": "../Dockerfile",
	// Sets the run context to one level up instead of the .devcontainer folder.
	"context": "..",
	"workspaceFolder": "${env:DOCKER_PROJ_PATH}",
	"workspaceMount": "source=${localWorkspaceFolder},target=${env:DOCKER_PROJ_PATH},type=bind",
	"mounts": [
		// "source=/dev/bus/usb,target=/dev/bus/usb,type=bind",
		"source=${env:NCS_INSTALL_DIR},target=${env:DOCKER_PROJ_PATH}/ncs,type=bind"
	],
	"remoteEnv": {
		"TOOLCHAIN_PATH": "${containerEnv:GNUARMEMB_TOOLCHAIN_PATH}"
	},
	// Set *default* container specific settings.json values on container create.
	"settings": {
		"search.useIgnoreFiles": false,
		"kconfig.root": "${env:DOCKER_PROJ_PATH}/Kconfig",
		"terminal.integrated.shell.linux": "/bin/bash",
		"terminal.integrated.inheritEnv": true,
		"terminal.integrated.copyOnSelection": true,
		"terminal.integrated.shellArgs.linux": [
			"--init-file",
			"script/bash-init.sh"
		],
		"C_Cpp.default.includePath": [
			"${workspaceFolder}/src/**",
			"${workspaceFolder}/build/zephyr/include/generated/**",
			"${workspaceFolder}/ncs/**"
		],
		"C_Cpp.intelliSenseEngine": "Default",
		"C_Cpp.autocomplete": "Default",
		"C_Cpp.errorSquiggles": "EnabledIfIncludesResolve",
		"C_Cpp.formatting": "Disabled",
		"C_Cpp.default.defines": [],
		"C_Cpp.default.compilerPath": "${TOOLCHAIN_PATH}/bin/arm-none-eabi-gcc",
		"C_Cpp.default.cStandard": "c11",
		"C_Cpp.default.cppStandard": "c++17",
		"C_Cpp.default.intelliSenseMode": "gcc-arm",
		"C_Cpp.default.forcedInclude": [
			"${workspaceFolder}/build/zephyr/include/generated/autoconf.h"
		],
	},
	// Add the IDs of extensions you want installed when the container is created.
	"extensions": [
		"ms-vscode.cpptools",
		"marus25.cortex-debug",
		"donjayamanne.git-extension-pack",
		"mhutchie.git-graph",
		"trond-snekvik.kconfig-lang",
		"twxs.cmake",
		"yzhang.markdown-all-in-one",
	],
	"build": {
		"args": {
			"UID": "${env:USER_ID}",
			"GID": "${env:GROUP_ID}",
			"PROJ_PATH": "${env:DOCKER_PROJ_PATH}",
		}
	},
	// Use 'forwardPorts' to make a list of ports inside the container available locally.
	// "forwardPorts": [],
	// Uncomment the next line to run commands after the container is created - for example installing curl.
	// "postCreateCommand": "apt-get update && apt-get install -y curl",
	// Uncomment when using a ptrace-based debugger like C++, Go, and Rust
	"runArgs": [
		"--cap-add=SYS_PTRACE",
		"--security-opt",
		"seccomp=unconfined",
		"--add-host=host.docker.internal:172.17.0.1",
		// "--privileged",
		// "--device=/dev/bus/usb"
	],
	"postCreateCommand": [
		"/bin/bash",
		"-c",
		"script/pre-start.sh"
	],
	"postStartCommand": [
		"/bin/bash",
		"-c",
		"script/post-start.sh -f"
	],
	"appPort": [
		5900
	],
	// Uncomment to use the Docker CLI from inside the container. See https://aka.ms/vscode-remote/samples/docker-from-docker.
	// "mounts": [ "source=/var/run/docker.sock,target=/var/run/docker.sock,type=bind" ],
	// Uncomment to connect as a non-root user if you've added one. See https://aka.ms/vscode-remote/containers/non-root.
	// "remoteUser": "user"
}